
-- ELIMINACI√ìN COMPLETA Y DEFINITIVA DE PER√çODOS DE N√ìMINA
-- Para la empresa espec√≠fica que est√° causando problemas

DO $$
DECLARE
    current_company_id UUID;
    deleted_vouchers INTEGER := 0;
    deleted_novedades INTEGER := 0;
    deleted_payrolls INTEGER := 0;
    deleted_periods_real INTEGER := 0;
    deleted_periods INTEGER := 0;
    deleted_sync_logs INTEGER := 0;
    deleted_audit_logs INTEGER := 0;
BEGIN
    -- Obtener company_id del usuario actual
    SELECT company_id INTO current_company_id 
    FROM public.profiles 
    WHERE user_id = auth.uid();
    
    IF current_company_id IS NOT NULL THEN
        RAISE NOTICE 'INICIANDO ELIMINACI√ìN COMPLETA para company_id: %', current_company_id;
        
        -- 1. Eliminar vouchers de n√≥mina
        DELETE FROM public.payroll_vouchers WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_vouchers = ROW_COUNT;
        
        -- 2. Eliminar novedades de n√≥mina y sus auditor√≠as
        DELETE FROM public.payroll_novedades_audit WHERE company_id = current_company_id;
        DELETE FROM public.payroll_novedades WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_novedades = ROW_COUNT;
        
        -- 3. Eliminar registros de auditor√≠a de reapertura
        DELETE FROM public.payroll_reopen_audit WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_audit_logs = ROW_COUNT;
        
        -- 4. Eliminar todos los registros de n√≥mina (payrolls)
        DELETE FROM public.payrolls WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_payrolls = ROW_COUNT;
        
        -- 5. Eliminar logs de sincronizaci√≥n
        DELETE FROM public.payroll_sync_log WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_sync_logs = ROW_COUNT;
        
        -- 6. Eliminar todos los per√≠odos de n√≥mina (tabla real)
        DELETE FROM public.payroll_periods_real WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_periods_real = ROW_COUNT;
        
        -- 7. Eliminar per√≠odos de la tabla legacy (si existen)
        DELETE FROM public.payroll_periods WHERE company_id = current_company_id;
        GET DIAGNOSTICS deleted_periods = ROW_COUNT;
        
        -- Mostrar resumen de eliminaci√≥n
        RAISE NOTICE 'üóëÔ∏è ELIMINACI√ìN COMPLETADA:';
        RAISE NOTICE '- Vouchers eliminados: %', deleted_vouchers;
        RAISE NOTICE '- Novedades eliminadas: %', deleted_novedades;
        RAISE NOTICE '- Registros de n√≥mina eliminados: %', deleted_payrolls;
        RAISE NOTICE '- Per√≠odos reales eliminados: %', deleted_periods_real;
        RAISE NOTICE '- Per√≠odos legacy eliminados: %', deleted_periods;
        RAISE NOTICE '- Logs de sincronizaci√≥n eliminados: %', deleted_sync_logs;
        RAISE NOTICE '- Logs de auditor√≠a eliminados: %', deleted_audit_logs;
        
        -- Verificaci√≥n final
        PERFORM 1 FROM public.payroll_periods_real WHERE company_id = current_company_id;
        IF NOT FOUND THEN
            RAISE NOTICE '‚úÖ VERIFICACI√ìN: No quedan per√≠odos de n√≥mina en la base de datos';
        ELSE
            RAISE NOTICE '‚ö†Ô∏è ADVERTENCIA: A√∫n quedan algunos per√≠odos';
        END IF;
        
    ELSE
        RAISE NOTICE '‚ùå No se encontr√≥ company_id para el usuario actual';
    END IF;
END $$;

-- Verificar que la eliminaci√≥n fue exitosa
SELECT 
    'payroll_periods_real' as tabla,
    COUNT(*) as registros_restantes
FROM public.payroll_periods_real 
WHERE company_id = (SELECT company_id FROM public.profiles WHERE user_id = auth.uid())
UNION ALL
SELECT 
    'payrolls' as tabla,
    COUNT(*) as registros_restantes
FROM public.payrolls 
WHERE company_id = (SELECT company_id FROM public.profiles WHERE user_id = auth.uid())
UNION ALL
SELECT 
    'payroll_vouchers' as tabla,  
    COUNT(*) as registros_restantes
FROM public.payroll_vouchers 
WHERE company_id = (SELECT company_id FROM public.profiles WHERE user_id = auth.uid());
