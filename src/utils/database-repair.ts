
/**
 * üîß UTILIDADES DE REPARACI√ìN DE BASE DE DATOS
 * Funciones para limpiar y normalizar datos inconsistentes
 */

import { supabase } from '@/integrations/supabase/client';

export class DatabaseRepairUtils {
  /**
   * üßπ LIMPIAR PER√çODOS DUPLICADOS
   */
  static async cleanDuplicatePeriods(): Promise<{
    success: boolean;
    duplicatesRemoved: number;
    message: string;
  }> {
    try {
      console.log('üßπ Iniciando limpieza de per√≠odos duplicados...');
      
      const { data, error } = await supabase.rpc('clean_specific_duplicate_periods');
      
      if (error) throw error;
      
      console.log('‚úÖ Limpieza completada:', data);
      
      return {
        success: true,
        duplicatesRemoved: data.periods_deleted || 0,
        message: `Se eliminaron ${data.periods_deleted || 0} per√≠odos duplicados`
      };
      
    } catch (error) {
      console.error('‚ùå Error limpiando duplicados:', error);
      return {
        success: false,
        duplicatesRemoved: 0,
        message: 'Error en limpieza de duplicados'
      };
    }
  }

  /**
   * üîÑ SINCRONIZAR DATOS HIST√ìRICOS
   */
  static async syncHistoricalData(periodId: string): Promise<{
    success: boolean;
    message: string;
  }> {
    try {
      console.log('üîÑ Sincronizando datos hist√≥ricos para per√≠odo:', periodId);
      
      const { data, error } = await supabase.rpc('sync_historical_payroll_data', {
        p_period_id: periodId
      });
      
      if (error) throw error;
      
      console.log('‚úÖ Sincronizaci√≥n completada:', data);
      
      return {
        success: data.success || false,
        message: data.message || 'Sincronizaci√≥n completada'
      };
      
    } catch (error) {
      console.error('‚ùå Error sincronizando datos:', error);
      return {
        success: false,
        message: 'Error en sincronizaci√≥n de datos'
      };
    }
  }

  /**
   * üîç DETECTAR PER√çODO INTELIGENTE
   */
  static async detectSmartPeriod(): Promise<{
    success: boolean;
    suggestion: any;
    message: string;
  }> {
    try {
      console.log('üîç Detectando per√≠odo inteligente...');
      
      const { data, error } = await supabase.rpc('detect_current_smart_period');
      
      if (error) throw error;
      
      console.log('‚úÖ Detecci√≥n completada:', data);
      
      return {
        success: data.success || false,
        suggestion: data.calculated_period || null,
        message: data.message || 'Detecci√≥n completada'
      };
      
    } catch (error) {
      console.error('‚ùå Error detectando per√≠odo:', error);
      return {
        success: false,
        suggestion: null,
        message: 'Error en detecci√≥n de per√≠odo'
      };
    }
  }
}
