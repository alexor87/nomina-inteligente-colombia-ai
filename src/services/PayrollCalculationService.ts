import { differenceInDays, parseISO } from 'date-fns';

export interface PayrollPeriod {
  tipo_periodo: 'quincenal' | 'mensual' | 'semanal';
  fecha_inicio: string;
  fecha_fin: string;
}

/**
 * Servicio centralizado para c치lculos de n칩mina
 * FUENTE 칔NICA DE VERDAD para d칤as trabajados
 */
export class PayrollCalculationService {
  /**
   * Calcula d칤as trabajados bas치ndose en el tipo de per칤odo seg칰n legislaci칩n colombiana
   * @param period - Per칤odo de n칩mina con tipo y fechas
   * @returns N칰mero de d칤as trabajados seg칰n el est치ndar legal
   */
  static calculateWorkedDays(period: PayrollPeriod | null): number {
    if (!period) return 30;

    const { tipo_periodo, fecha_inicio, fecha_fin } = period;

    // LEGISLACI칍N COLOMBIANA: Usar tipo de per칤odo como fuente de verdad
    switch (tipo_periodo) {
      case 'quincenal':
        // Los per칤odos quincenales SIEMPRE son 15 d칤as seg칰n legislaci칩n
        console.log('游늵 PER칈ODO QUINCENAL - ASIGNANDO 15 D칈AS (Legislaci칩n Colombiana)');
        return 15;
        
      case 'semanal':
        // Los per칤odos semanales SIEMPRE son 7 d칤as
        console.log('游늵 PER칈ODO SEMANAL - ASIGNANDO 7 D칈AS');
        return 7;
        
      case 'mensual':
        // Para per칤odos mensuales, calcular d칤as reales del mes
        if (fecha_inicio && fecha_fin) {
          const startDate = parseISO(fecha_inicio);
          const endDate = parseISO(fecha_fin);
          const realDays = differenceInDays(endDate, startDate) + 1;
          console.log('游늵 PER칈ODO MENSUAL - CALCULANDO D칈AS REALES:', realDays);
          return realDays;
        }
        return 30; // Fallback para mensual
        
      default:
        console.warn('丘멆잺 TIPO DE PER칈ODO DESCONOCIDO:', tipo_periodo);
        return 30;
    }
  }

  /**
   * Calcula d칤as reales del calendario (para informaci칩n adicional)
   * @param fecha_inicio - Fecha de inicio del per칤odo
   * @param fecha_fin - Fecha de fin del per칤odo
   * @returns N칰mero de d칤as calendario entre las fechas
   */
  static calculateRealDays(fecha_inicio: string, fecha_fin: string): number {
    if (!fecha_inicio || !fecha_fin) return 0;
    
    const startDate = parseISO(fecha_inicio);
    const endDate = parseISO(fecha_fin);
    return differenceInDays(endDate, startDate) + 1;
  }

  /**
   * Obtiene informaci칩n completa de d칤as para un per칤odo
   * @param period - Per칤odo de n칩mina
   * @returns Objeto con d칤as legales y d칤as reales
   */
  static getDaysInfo(period: PayrollPeriod | null) {
    if (!period) {
      return {
        legalDays: 30,
        realDays: 30,
        periodType: 'mensual' as const
      };
    }

    const legalDays = this.calculateWorkedDays(period);
    const realDays = this.calculateRealDays(period.fecha_inicio, period.fecha_fin);

    return {
      legalDays,
      realDays,
      periodType: period.tipo_periodo
    };
  }
}