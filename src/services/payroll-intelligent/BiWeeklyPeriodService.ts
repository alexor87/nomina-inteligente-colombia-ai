
import { supabase } from '@/integrations/supabase/client';

export class BiWeeklyPeriodService {
  /**
   * L√ìGICA PROFESIONAL CORREGIDA - PER√çODOS QUINCENALES CONSECUTIVOS ESTRICTOS
   * SIEMPRE genera per√≠odos 1-15 y 16-fin de mes, sin excepci√≥n
   */
  
  static async generateNextConsecutivePeriodFromDatabase(companyId: string): Promise<{
    startDate: string;
    endDate: string;
  }> {
    console.log('üîÑ NUEVA L√ìGICA ESTRICTA: Generando per√≠odo quincenal consecutivo desde BD para empresa:', companyId);
    
    try {
      // Buscar el √∫ltimo per√≠odo cerrado quincenal de la empresa
      const { data: lastPeriod, error } = await supabase
        .from('payroll_periods_real')
        .select('*')
        .eq('company_id', companyId)
        .eq('tipo_periodo', 'quincenal')
        .neq('estado', 'borrador')
        .order('fecha_fin', { ascending: false })
        .limit(1)
        .maybeSingle();

      if (error) {
        console.error('Error obteniendo √∫ltimo per√≠odo:', error);
        // Si hay error, generar PRIMER per√≠odo estricto (1-15)
        return this.generateFirstStrictBiWeeklyPeriod();
      }

      if (!lastPeriod) {
        console.log('‚ùå NO HAY PER√çODOS PREVIOS - Generando PRIMER per√≠odo estricto (1-15)');
        return this.generateFirstStrictBiWeeklyPeriod();
      }

      console.log('‚úÖ √öltimo per√≠odo encontrado:', lastPeriod.fecha_inicio, '-', lastPeriod.fecha_fin);

      // Generar siguiente per√≠odo ESTRICTAMENTE consecutivo
      const nextPeriod = this.generateStrictNextConsecutivePeriod(lastPeriod.fecha_fin);
      
      console.log('‚úÖ Siguiente per√≠odo quincenal ESTRICTO generado:', nextPeriod);
      return nextPeriod;

    } catch (error) {
      console.error('Error generando per√≠odo quincenal desde BD:', error);
      return this.generateFirstStrictBiWeeklyPeriod();
    }
  }

  /**
   * NUEVO: Generar PRIMER per√≠odo estricto SIEMPRE 1-15 del mes actual
   * NO depende de fecha actual, SIEMPRE empieza con 1-15
   */
  static generateFirstStrictBiWeeklyPeriod(): {
    startDate: string;
    endDate: string;
  } {
    const today = new Date();
    const year = today.getFullYear();
    const month = today.getMonth();
    
    console.log('üÜï GENERANDO PRIMER PER√çODO ESTRICTO: 1-15 del mes actual');
    
    // SIEMPRE empezar con la primera quincena del mes actual
    const startDate = new Date(year, month, 1);
    const endDate = new Date(year, month, 15);
    
    const result = {
      startDate: startDate.toISOString().split('T')[0],
      endDate: endDate.toISOString().split('T')[0]
    };
    
    console.log('üéØ PRIMER PER√çODO ESTRICTO:', result);
    return result;
  }

  /**
   * NUEVA L√ìGICA ESTRICTA: Generar siguiente per√≠odo consecutivo
   * REGLAS ABSOLUTAS: Solo 1-15 y 16-fin de mes
   */
  static generateStrictNextConsecutivePeriod(lastPeriodEndDate: string): {
    startDate: string;
    endDate: string;
  } {
    console.log('üìÖ GENERANDO PER√çODO CONSECUTIVO ESTRICTO desde:', lastPeriodEndDate);
    
    const lastEnd = new Date(lastPeriodEndDate);
    
    // El siguiente per√≠odo inicia el d√≠a despu√©s del √∫ltimo
    const nextStart = new Date(lastEnd);
    nextStart.setDate(lastEnd.getDate() + 1);
    
    const startDay = nextStart.getDate();
    const month = nextStart.getMonth();
    const year = nextStart.getFullYear();
    
    let finalStartDate: Date;
    let finalEndDate: Date;
    
    console.log('üîç AN√ÅLISIS: D√≠a de inicio calculado:', startDay);
    
    // REGLAS ESTRICTAS ABSOLUTAS
    if (startDay === 1) {
      // Si inicia el 1, es primera quincena (1-15)
      finalStartDate = new Date(year, month, 1);
      finalEndDate = new Date(year, month, 15);
      console.log('‚úÖ PRIMERA QUINCENA ESTRICTA (1-15)');
    } else if (startDay === 16) {
      // Si inicia el 16, es segunda quincena (16-fin del mes)
      finalStartDate = new Date(year, month, 16);
      finalEndDate = new Date(year, month + 1, 0); // √öltimo d√≠a del mes
      console.log('‚úÖ SEGUNDA QUINCENA ESTRICTA (16-fin de mes)');
    } else {
      // CORRECCI√ìN AUTOM√ÅTICA FORZADA
      console.log('‚ö†Ô∏è FECHA IRREGULAR DETECTADA - APLICANDO CORRECCI√ìN AUTOM√ÅTICA');
      
      if (startDay <= 15) {
        // Forzar a primera quincena
        finalStartDate = new Date(year, month, 1);
        finalEndDate = new Date(year, month, 15);
        console.log('üîß CORREGIDO A PRIMERA QUINCENA (1-15)');
      } else {
        // Forzar a segunda quincena
        finalStartDate = new Date(year, month, 16);
        finalEndDate = new Date(year, month + 1, 0);
        console.log('üîß CORREGIDO A SEGUNDA QUINCENA (16-fin de mes)');
      }
    }
    
    const result = {
      startDate: finalStartDate.toISOString().split('T')[0],
      endDate: finalEndDate.toISOString().split('T')[0]
    };
    
    console.log('üéØ PER√çODO CONSECUTIVO ESTRICTO FINAL:', result);
    return result;
  }

  /**
   * M√âTODO ACTUALIZADO: Generar per√≠odo actual estricto
   * ELIMINA dependencia del d√≠a actual para ser m√°s predecible
   */
  static generateCurrentBiWeeklyPeriod(): {
    startDate: string;
    endDate: string;
  } {
    console.log('üìÖ GENERANDO PER√çODO ACTUAL ESTRICTO');
    
    const today = new Date();
    const day = today.getDate();
    const month = today.getMonth();
    const year = today.getFullYear();
    
    if (day <= 15) {
      // Primera quincena (1-15)
      const result = {
        startDate: new Date(year, month, 1).toISOString().split('T')[0],
        endDate: new Date(year, month, 15).toISOString().split('T')[0]
      };
      console.log('‚úÖ PER√çODO ACTUAL: Primera quincena', result);
      return result;
    } else {
      // Segunda quincena (16-fin de mes)
      const result = {
        startDate: new Date(year, month, 16).toISOString().split('T')[0],
        endDate: new Date(year, month + 1, 0).toISOString().split('T')[0]
      };
      console.log('‚úÖ PER√çODO ACTUAL: Segunda quincena', result);
      return result;
    }
  }

  /**
   * M√âTODO ACTUALIZADO: Generar siguiente per√≠odo consecutivo (sin BD)
   */
  static generateNextConsecutivePeriod(lastPeriodEndDate: string): {
    startDate: string;
    endDate: string;
  } {
    return this.generateStrictNextConsecutivePeriod(lastPeriodEndDate);
  }
  
  /**
   * VALIDADOR ESTRICTO MEJORADO
   */
  static validateBiWeeklyPeriod(startDate: string, endDate: string): {
    isValid: boolean;
    correctedPeriod?: { startDate: string; endDate: string };
    message: string;
  } {
    const start = new Date(startDate);
    const end = new Date(endDate);
    
    const startDay = start.getDate();
    const endDay = end.getDate();
    const sameMonth = start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear();
    
    // Validar primera quincena (1-15)
    if (startDay === 1 && endDay === 15 && sameMonth) {
      return {
        isValid: true,
        message: '‚úÖ Per√≠odo v√°lido: Primera quincena (1-15)'
      };
    }
    
    // Validar segunda quincena (16-fin de mes)
    const lastDayOfMonth = new Date(start.getFullYear(), start.getMonth() + 1, 0).getDate();
    if (startDay === 16 && endDay === lastDayOfMonth && sameMonth) {
      return {
        isValid: true,
        message: '‚úÖ Per√≠odo v√°lido: Segunda quincena (16-fin de mes)'
      };
    }
    
    // Si no es v√°lido, generar correcci√≥n ESTRICTA
    let correctedPeriod: { startDate: string; endDate: string };
    
    if (startDay <= 15) {
      // Corregir a primera quincena
      correctedPeriod = {
        startDate: new Date(start.getFullYear(), start.getMonth(), 1).toISOString().split('T')[0],
        endDate: new Date(start.getFullYear(), start.getMonth(), 15).toISOString().split('T')[0]
      };
    } else {
      // Corregir a segunda quincena
      correctedPeriod = {
        startDate: new Date(start.getFullYear(), start.getMonth(), 16).toISOString().split('T')[0],
        endDate: new Date(start.getFullYear(), start.getMonth() + 1, 0).toISOString().split('T')[0]
      };
    }
    
    return {
      isValid: false,
      correctedPeriod,
      message: `üîß Per√≠odo irregular corregido: ${startDate}-${endDate} ‚Üí ${correctedPeriod.startDate}-${correctedPeriod.endDate}`
    };
  }
  
  /**
   * NORMALIZACI√ìN AUTOM√ÅTICA MEJORADA
   */
  static async normalizeAllBiWeeklyPeriods(companyId: string): Promise<void> {
    try {
      console.log('üîÑ NORMALIZANDO PER√çODOS QUINCENALES CON L√ìGICA ESTRICTA para empresa:', companyId);
      
      const { data: periods, error } = await supabase
        .from('payroll_periods_real')
        .select('*')
        .eq('company_id', companyId)
        .eq('tipo_periodo', 'quincenal')
        .order('fecha_inicio', { ascending: true });
      
      if (error) throw error;
      
      if (!periods || periods.length === 0) {
        console.log('‚ÑπÔ∏è No hay per√≠odos quincenales para normalizar');
        return;
      }
      
      console.log(`üìä NORMALIZANDO ${periods.length} per√≠odos quincenales con REGLAS ESTRICTAS`);
      
      for (const period of periods) {
        const validation = this.validateBiWeeklyPeriod(period.fecha_inicio, period.fecha_fin);
        
        if (!validation.isValid && validation.correctedPeriod) {
          console.log('üìù CORRECCI√ìN AUTOM√ÅTICA:', validation.message);
          
          const { error: updateError } = await supabase
            .from('payroll_periods_real')
            .update({
              fecha_inicio: validation.correctedPeriod.startDate,
              fecha_fin: validation.correctedPeriod.endDate,
              updated_at: new Date().toISOString()
            })
            .eq('id', period.id);
          
          if (updateError) {
            console.error(`‚ùå Error corrigiendo per√≠odo ${period.id}:`, updateError);
          } else {
            console.log(`‚úÖ Per√≠odo ${period.id} CORREGIDO AUTOM√ÅTICAMENTE`);
          }
        }
      }
      
      console.log('‚úÖ NORMALIZACI√ìN ESTRICTA COMPLETADA');
    } catch (error) {
      console.error('‚ùå Error normalizando per√≠odos quincenales:', error);
    }
  }
}
