import { PayrollPeriod } from '@/types/payroll';
import { supabase } from '@/integrations/supabase/client';
import { PeriodStrategyFactory, PeriodGenerationStrategy } from './PeriodGenerationStrategy';

export class PayrollPeriodCalculationService {
  /**
   * ARQUITECTURA PROFESIONAL MEJORADA - COORDINADOR PRINCIPAL CON DETECCI√ìN DE DATOS CORRUPTOS
   * Usa Strategy pattern y detecta autom√°ticamente per√≠odos con fechas incorrectas
   */
  
  static async calculateNextPeriodFromDatabase(periodicity: string, companyId: string): Promise<{
    startDate: string;
    endDate: string;
  }> {
    console.log('üìÖ CALCULANDO SIGUIENTE PER√çODO CON DETECCI√ìN DE DATOS CORRUPTOS:', {
      periodicity,
      companyId
    });

    const strategy = PeriodStrategyFactory.createStrategy(periodicity);
    
    try {
      // Buscar per√≠odos cerrados ordenados por fecha
      const { data: periods, error } = await supabase
        .from('payroll_periods_real')
        .select('*')
        .eq('company_id', companyId)
        .eq('tipo_periodo', periodicity)
        .neq('estado', 'borrador')
        .order('fecha_fin', { ascending: false });

      if (error) {
        console.error('Error obteniendo per√≠odos:', error);
        return strategy.generateFirstPeriod();
      }

      if (!periods || periods.length === 0) {
        console.log('‚ùå NO HAY PER√çODOS PREVIOS - Generando PRIMER per√≠odo');
        return strategy.generateFirstPeriod();
      }

      // NUEVO: Detectar y filtrar per√≠odos con datos corruptos
      const validPeriods = periods.filter(period => {
        const validation = strategy.validateAndCorrectPeriod(period.fecha_inicio, period.fecha_fin);
        if (!validation.isValid) {
          console.warn('‚ö†Ô∏è PER√çODO CORRUPTO DETECTADO:', {
            id: period.id,
            periodo: period.periodo,
            fechas: `${period.fecha_inicio} - ${period.fecha_fin}`,
            problema: validation.message
          });
          return false;
        }
        return true;
      });

      if (validPeriods.length === 0) {
        console.log('‚ùå TODOS LOS PER√çODOS EST√ÅN CORRUPTOS - Generando PRIMER per√≠odo v√°lido');
        return strategy.generateFirstPeriod();
      }

      const lastValidPeriod = validPeriods[0];
      console.log('‚úÖ √öltimo per√≠odo V√ÅLIDO encontrado:', lastValidPeriod.fecha_inicio, '-', lastValidPeriod.fecha_fin);

      // Generar siguiente per√≠odo usando el √∫ltimo per√≠odo v√°lido
      const nextPeriod = strategy.generateNextConsecutivePeriod(lastValidPeriod.fecha_fin);
      
      console.log('‚úÖ Siguiente per√≠odo generado correctamente:', nextPeriod);
      return nextPeriod;

    } catch (error) {
      console.error('Error generando per√≠odo desde BD:', error);
      return strategy.generateFirstPeriod();
    }
  }

  /**
   * NUEVO: Correcci√≥n autom√°tica de per√≠odos corruptos
   */
  static async autoCorrectCorruptPeriods(companyId: string, periodicity: string = 'quincenal'): Promise<{
    correctedCount: number;
    errors: string[];
    summary: string;
  }> {
    console.log('üîß INICIANDO CORRECCI√ìN AUTOM√ÅTICA DE PER√çODOS CORRUPTOS para:', companyId);
    
    const strategy = PeriodStrategyFactory.createStrategy(periodicity);
    let correctedCount = 0;
    const errors: string[] = [];

    try {
      const { data: periods, error } = await supabase
        .from('payroll_periods_real')
        .select('*')
        .eq('company_id', companyId)
        .eq('tipo_periodo', periodicity)
        .order('fecha_inicio', { ascending: true });

      if (error) throw error;

      if (!periods || periods.length === 0) {
        return { correctedCount: 0, errors: [], summary: 'No hay per√≠odos para corregir' };
      }

      console.log(`üìä CORRIGIENDO ${periods.length} per√≠odos autom√°ticamente`);

      // Corregir per√≠odos uno por uno manteniendo la secuencia
      for (const period of periods) {
        const validation = strategy.validateAndCorrectPeriod(period.fecha_inicio, period.fecha_fin);
        
        if (!validation.isValid && validation.correctedPeriod) {
          console.log('üìù CORRECCI√ìN AUTOM√ÅTICA:', validation.message);
          
          const { error: updateError } = await supabase
            .from('payroll_periods_real')
            .update({
              fecha_inicio: validation.correctedPeriod.startDate,
              fecha_fin: validation.correctedPeriod.endDate,
              updated_at: new Date().toISOString()
            })
            .eq('id', period.id);

          if (updateError) {
            const errorMsg = `Error corrigiendo per√≠odo ${period.id}: ${updateError.message}`;
            console.error('‚ùå', errorMsg);
            errors.push(errorMsg);
          } else {
            console.log(`‚úÖ Per√≠odo ${period.id} CORREGIDO: ${period.fecha_inicio}-${period.fecha_fin} ‚Üí ${validation.correctedPeriod.startDate}-${validation.correctedPeriod.endDate}`);
            correctedCount++;
          }
        }
      }

      const summary = `‚úÖ Correcci√≥n autom√°tica completada: ${correctedCount} per√≠odos corregidos, ${errors.length} errores`;
      console.log(summary);
      
      return { correctedCount, errors, summary };

    } catch (error) {
      console.error('‚ùå Error en correcci√≥n autom√°tica:', error);
      return {
        correctedCount: 0,
        errors: [`Error general: ${error.message}`],
        summary: '‚ùå Error en correcci√≥n autom√°tica'
      };
    }
  }

  /**
   * M√âTODO DE RESPALDO UNIFICADO
   */
  static calculateNextPeriod(periodicity: string, closedPeriod: PayrollPeriod): {
    startDate: string;
    endDate: string;
  } {
    console.log('üìÖ CALCULANDO SIGUIENTE PER√çODO BASADO EN PER√çODO CERRADO:', {
      periodicity,
      closedPeriodEnd: closedPeriod.fecha_fin
    });

    const strategy = PeriodStrategyFactory.createStrategy(periodicity);
    return strategy.generateNextConsecutivePeriod(closedPeriod.fecha_fin);
  }

  /**
   * VALIDACI√ìN Y CORRECCI√ìN AUTOM√ÅTICA
   */
  static validateAndCorrectPeriod(
    periodicity: string, 
    startDate: string, 
    endDate: string
  ): {
    isValid: boolean;
    correctedPeriod?: { startDate: string; endDate: string };
    message: string;
  } {
    const strategy = PeriodStrategyFactory.createStrategy(periodicity);
    return strategy.validateAndCorrectPeriod(startDate, endDate);
  }

  /**
   * CORRECCI√ìN MASIVA DE PER√çODOS EXISTENTES
   */
  static async correctAllPeriodsForCompany(companyId: string, periodicity: string): Promise<{
    corrected: number;
    errors: string[];
  }> {
    console.log('üîß INICIANDO CORRECCI√ìN MASIVA DE PER√çODOS para empresa:', companyId);
    
    const strategy = PeriodStrategyFactory.createStrategy(periodicity);
    let corrected = 0;
    const errors: string[] = [];

    try {
      // Obtener todos los per√≠odos de la empresa
      const { data: periods, error } = await supabase
        .from('payroll_periods_real')
        .select('*')
        .eq('company_id', companyId)
        .eq('tipo_periodo', periodicity)
        .order('fecha_inicio', { ascending: true });

      if (error) throw error;

      if (!periods || periods.length === 0) {
        console.log('‚ÑπÔ∏è No hay per√≠odos para corregir');
        return { corrected: 0, errors: [] };
      }

      console.log(`üìä CORRIGIENDO ${periods.length} per√≠odos con arquitectura unificada`);

      for (const period of periods) {
        const validation = strategy.validateAndCorrectPeriod(period.fecha_inicio, period.fecha_fin);
        
        if (!validation.isValid && validation.correctedPeriod) {
          console.log('üìù CORRECCI√ìN AUTOM√ÅTICA:', validation.message);
          
          const { error: updateError } = await supabase
            .from('payroll_periods_real')
            .update({
              fecha_inicio: validation.correctedPeriod.startDate,
              fecha_fin: validation.correctedPeriod.endDate,
              updated_at: new Date().toISOString()
            })
            .eq('id', period.id);

          if (updateError) {
            const errorMsg = `Error corrigiendo per√≠odo ${period.id}: ${updateError.message}`;
            console.error('‚ùå', errorMsg);
            errors.push(errorMsg);
          } else {
            console.log(`‚úÖ Per√≠odo ${period.id} CORREGIDO AUTOM√ÅTICAMENTE`);
            corrected++;
          }
        }
      }

      console.log('‚úÖ CORRECCI√ìN MASIVA COMPLETADA:', { corrected, errors: errors.length });
      return { corrected, errors };

    } catch (error) {
      console.error('‚ùå Error en correcci√≥n masiva:', error);
      errors.push(`Error general: ${error.message}`);
      return { corrected, errors };
    }
  }

  // Validar que las fechas calculadas no se superpongan con per√≠odos existentes
  static validateNonOverlapping(startDate: string, endDate: string, existingPeriods: PayrollPeriod[]): {
    isValid: boolean;
    conflictPeriod?: PayrollPeriod;
  } {
    const newStart = new Date(startDate).getTime();
    const newEnd = new Date(endDate).getTime();

    for (const period of existingPeriods) {
      const periodStart = new Date(period.fecha_inicio).getTime();
      const periodEnd = new Date(period.fecha_fin).getTime();
      
      // Verificar superposici√≥n
      const overlaps = newStart <= periodEnd && newEnd >= periodStart;
      
      if (overlaps) {
        console.warn('‚ö†Ô∏è SUPERPOSICI√ìN DETECTADA con per√≠odo:', period);
        return { isValid: false, conflictPeriod: period };
      }
    }

    return { isValid: true };
  }
}
