
import { supabase } from '@/integrations/supabase/client';
import { PayrollPeriodService, PayrollPeriod } from '../PayrollPeriodService';
import { PayrollConfigurationService } from './PayrollConfigurationService';
import { PayrollPeriodCalculationService } from './PayrollPeriodCalculationService';

export interface PeriodStatus {
  action: 'resume' | 'create_new' | 'configure' | 'error';
  currentPeriod?: PayrollPeriod;
  nextPeriod?: {
    startDate: string;
    endDate: string;
    type: string;
  };
  message: string;
  title: string;
}

export class PayrollPeriodDetectionService {
  // Detectar estado inteligente del m√≥dulo de n√≥mina
  static async detectPeriodStatus(): Promise<PeriodStatus> {
    try {
      console.log('üîç Detectando estado inteligente del m√≥dulo de n√≥mina...');
      
      const companyId = await PayrollPeriodService.getCurrentUserCompanyId();
      if (!companyId) {
        console.log('‚ùå No se encontr√≥ company_id');
        return {
          action: 'configure',
          message: 'Para poder liquidar la n√≥mina, primero debes configurar la periodicidad desde el m√≥dulo de Configuraci√≥n.',
          title: 'Configuraci√≥n requerida'
        };
      }

      // Verificar configuraci√≥n de empresa - forzar refresh completo
      console.log('üîç Obteniendo configuraci√≥n de empresa con refresh forzado...');
      const companySettings = await PayrollConfigurationService.getCompanySettingsForceRefresh(companyId);
      
      if (!companySettings || !companySettings.periodicity) {
        console.log('‚ùå No se encontr√≥ configuraci√≥n de empresa o periodicidad');
        return {
          action: 'configure',
          message: 'Para poder liquidar la n√≥mina, primero debes configurar la periodicidad desde el m√≥dulo de Configuraci√≥n.',
          title: 'Configuraci√≥n requerida'
        };
      }

      console.log('‚úÖ Configuraci√≥n encontrada:', companySettings);
      console.log('üìä Periodicidad configurada:', companySettings.periodicity);

      // Buscar periodo activo (borrador o en proceso)
      const activePeriod = await this.getActivePeriod(companyId);
      
      if (activePeriod) {
        // Verificar que el per√≠odo activo coincida con la periodicidad configurada
        if (activePeriod.tipo_periodo !== companySettings.periodicity) {
          console.log('‚ö†Ô∏è El per√≠odo activo no coincide con la periodicidad configurada');
          console.log('Per√≠odo activo:', activePeriod.tipo_periodo, 'vs Configuraci√≥n:', companySettings.periodicity);
          
          // Si hay un conflicto, sugerir crear un nuevo per√≠odo con la configuraci√≥n correcta
          const lastClosedPeriod = await this.getLastClosedPeriod(companyId);
          const nextPeriodDates = PayrollPeriodCalculationService.calculateNextPeriod(
            companySettings.periodicity,
            lastClosedPeriod
          );

          const nextPeriodText = PayrollPeriodService.formatPeriodText(
            nextPeriodDates.startDate,
            nextPeriodDates.endDate
          );

          return {
            action: 'create_new',
            currentPeriod: activePeriod,
            nextPeriod: {
              startDate: nextPeriodDates.startDate,
              endDate: nextPeriodDates.endDate,
              type: companySettings.periodicity
            },
            message: `Hay un cambio en la configuraci√≥n de periodicidad. ¬øDeseas crear un nuevo per√≠odo ${companySettings.periodicity} ${nextPeriodText}?`,
            title: 'Actualizar periodicidad'
          };
        }

        // Existe un periodo abierto con la periodicidad correcta - reanudar
        const periodText = PayrollPeriodService.formatPeriodText(
          activePeriod.fecha_inicio, 
          activePeriod.fecha_fin
        );
        
        console.log('üîÑ Periodo activo encontrado con periodicidad correcta:', activePeriod.id);
        
        return {
          action: 'resume',
          currentPeriod: activePeriod,
          message: `Retomando la n√≥mina ${activePeriod.tipo_periodo} en curso ${periodText}`,
          title: 'N√≥mina en curso'
        };
      }

      // No hay periodo activo - verificar si hay periodo cerrado reciente
      const lastClosedPeriod = await this.getLastClosedPeriod(companyId);
      const nextPeriodDates = PayrollPeriodCalculationService.calculateNextPeriod(
        companySettings.periodicity,
        lastClosedPeriod
      );

      console.log('üìÖ Calculando siguiente periodo con periodicidad:', companySettings.periodicity);
      console.log('üìÖ Fechas calculadas:', nextPeriodDates);

      if (lastClosedPeriod) {
        const lastPeriodText = PayrollPeriodService.formatPeriodText(
          lastClosedPeriod.fecha_inicio,
          lastClosedPeriod.fecha_fin
        );
        const nextPeriodText = PayrollPeriodService.formatPeriodText(
          nextPeriodDates.startDate,
          nextPeriodDates.endDate
        );

        console.log('‚úÖ √öltimo periodo cerrado encontrado, sugeriendo siguiente');

        return {
          action: 'create_new',
          currentPeriod: lastClosedPeriod,
          nextPeriod: {
            startDate: nextPeriodDates.startDate,
            endDate: nextPeriodDates.endDate,
            type: companySettings.periodicity
          },
          message: `Ya cerraste la n√≥mina ${lastPeriodText}. ¬øDeseas iniciar la siguiente n√≥mina ${companySettings.periodicity} ${nextPeriodText}?`,
          title: 'Iniciar nuevo periodo'
        };
      }

      // Primer periodo - crear autom√°ticamente con la periodicidad configurada
      console.log('üÜï Primera n√≥mina - creando periodo inicial con periodicidad:', companySettings.periodicity);
      
      const nextPeriodText = PayrollPeriodService.formatPeriodText(
        nextPeriodDates.startDate,
        nextPeriodDates.endDate
      );
      
      return {
        action: 'create_new',
        nextPeriod: {
          startDate: nextPeriodDates.startDate,
          endDate: nextPeriodDates.endDate,
          type: companySettings.periodicity
        },
        message: `¬øDeseas iniciar tu primera n√≥mina ${companySettings.periodicity} ${nextPeriodText}?`,
        title: 'Primera n√≥mina'
      };

    } catch (error) {
      console.error('‚ùå Error detectando estado del periodo:', error);
      return {
        action: 'error',
        message: 'Ocurri√≥ un error al verificar el estado de la n√≥mina. Intenta nuevamente.',
        title: 'Error'
      };
    }
  }

  // Obtener periodo activo (borrador o en proceso)
  private static async getActivePeriod(companyId: string): Promise<PayrollPeriod | null> {
    const { data, error } = await supabase
      .from('payroll_periods')
      .select('*')
      .eq('company_id', companyId)
      .in('estado', ['borrador', 'en_proceso'])
      .order('created_at', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (error) throw error;
    return data as PayrollPeriod | null;
  }

  // Obtener √∫ltimo periodo cerrado
  private static async getLastClosedPeriod(companyId: string): Promise<PayrollPeriod | null> {
    const { data, error } = await supabase
      .from('payroll_periods')
      .select('*')
      .eq('company_id', companyId)
      .eq('estado', 'aprobado')
      .order('fecha_fin', { ascending: false })
      .limit(1)
      .maybeSingle();

    if (error) throw error;
    return data as PayrollPeriod | null;
  }
}
